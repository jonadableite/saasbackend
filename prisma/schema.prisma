generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      String            @id @default(uuid())
  name                    String
  active                  Boolean?          @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  WhatleadUser            User[]
  whatleadparceiroconfigs CompaniesUnites[]

  @@index([createdAt(sort: Desc)])
  @@map("whatlead_companies")
}

model User {
  id                       String               @id @default(uuid())
  email                    String               @unique
  name                     String
  password                 String
  profile                  String
  phone                    String
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  active                   Boolean?             @default(true)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  whatleadCompanyId        String
  plan                     String               @default("free")
  status                   Boolean              @default(true)
  maxInstances             Int                  @default(2)
  messagesPerDay           Int                  @default(20)
  features                 String[]             @default([])
  support                  String               @default("basic")
  trialEndDate             DateTime?
  role                     String               @default("user")
  referredBy               String?
  evoAiUserId              String?
  image                    String?
  client_Id                String?
  hotmartCustomerId        String?
  hotmartSubscriberCode    String?
  isActive                 Boolean?             @default(true)
  subscriptionEndDate      DateTime?
  subscriptionStatus       String?
  contacts                 Contact[]
  instances                Instance[]
  Payment                  Payment[]
  warmupStats              WarmupStats[]
  CampaignLead             CampaignLead[]
  Campaign                 Campaign[]
  contactNotes             ContactNote[]
  hotmartTransactions      HotmartTransaction[]
  MessageReaction          MessageReaction[]
  affiliate                User?                @relation("AffiliateReferral", fields: [referredBy], references: [id])
  affiliates               User[]               @relation("AffiliateReferral")
  company                  Company              @relation(fields: [whatleadCompanyId], references: [id], onDelete: Cascade)

  @@index([email, profile, phone, createdAt(sort: Desc)])
  @@index([hotmartCustomerId])
  @@index([subscriptionStatus])
  @@map("whatlead_users")
}

model CompaniesUnites {
  id                         String    @id @default(uuid())
  createdAt                  DateTime? @db.Date
  name                       String?
  productdefault             String?
  campaignstatus             String?
  enablecuration             Boolean?
  enabletosendustolead       Boolean?
  enabled                    Boolean?
  isconversationia           Boolean?
  campaignnumberbusiness     String?   @unique
  whatsappprovider           String?
  enabletosendprovider       Boolean?
  enabletosecondcallprovider Boolean?
  integrationconfiguration   Json?
  integrationname            String?
  templatelistvars           Json[]
  metaconfiguration          Json?
  messageperruns             Json[]
  notifyconfiguration        Json?
  updatedAt                  DateTime? @db.Date
  whitelabel_config          String
  whatleadCompanyId          String?
  leads                      Lead[]
  company                    Company?  @relation(fields: [whatleadCompanyId], references: [id], onDelete: Cascade)

  @@map("whatleadparceiroconfigs")
}

model Lead {
  id                      String          @id @default(uuid())
  externalid              String?
  sourceid                String?
  name                    String
  phone                   String
  email                   String?
  lastmessagesent         DateTime?
  stepsecondcalltemplate  Int?
  stepnointeraction       Int?
  nointeractionquantity   Int?
  accepttemplate          Boolean?
  acceptsecondtemplate    Boolean?
  status                  String?
  dialog                  Json[]
  configid                String
  whitelabelconfig        String
  lastintent              String?
  broker                  String?
  origin                  String?
  send                    Boolean?
  sendAt                  DateTime?
  isBusinessAutoResponder Boolean?        @default(false)
  startmessage            DateTime?       @default(now())
  schedulingdata          String?
  productchoosebyclient   String?
  productid               Int?
  createdat               DateTime        @default(now())
  updatedat               DateTime        @updatedAt
  curation                Json?
  MessageLog              MessageLog[]
  config                  CompaniesUnites @relation(fields: [configid], references: [id], onDelete: Cascade)

  @@index([phone, configid])
  @@map("whatleadleads")
}

model Instance {
  id                      String             @id @default(uuid())
  instanceName            String             @unique
  number                  String?
  ownerJid                String?
  profilePicUrl           String?
  integration             String             @default("WHATSAPP-BAILEYS")
  token                   String?
  clientName              String?
  profileName             String?
  userId                  String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  disconnectedAt          DateTime?
  disconnectionObject     Json?
  disconnectionReasonCode String?
  proxyConfig             Json?
  typebot                 Json?
  connectionStatus        InstanceStatus     @default(DISCONNECTED)
  campaignDispatches      CampaignDispatch[]
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaStats              MediaStats[]
  warmupStats             WarmupStats?
  campaignSchedules       CampaignSchedule[]
  campaigns               Campaign[]

  @@index([userId])
  @@index([instanceName])
  @@index([connectionStatus])
}

model MediaStats {
  id                  String        @id @default(uuid())
  instanceName        String
  date                DateTime      @default(now())
  text                Int           @default(0)
  image               Int           @default(0)
  video               Int           @default(0)
  audio               Int           @default(0)
  sticker             Int           @default(0)
  reaction            Int           @default(0)
  isReceived          Boolean       @default(false)
  totalDaily          Int           @default(0)
  totalAllTime        Int           @default(0)
  totalSent           Int           @default(0)
  totalReceived       Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  instance            Instance      @relation(fields: [instanceName], references: [instanceName], onDelete: Cascade)
  warmupStatsReceived WarmupStats[] @relation("WarmupStatsToMediaStatsReceived")
  warmupStatsSent     WarmupStats[] @relation("WarmupStatsToMediaStatsSent")

  @@index([instanceName])
  @@index([date])
}

model WarmupStats {
  id               String      @id @default(uuid())
  instanceName     String      @unique
  status           String      @default("paused")
  messagesSent     Int         @default(0)
  messagesReceived Int         @default(0)
  warmupTime       Int         @default(0)
  lastActive       DateTime    @default(now())
  startTime        DateTime?
  pauseTime        DateTime?
  progress         Int         @default(0)
  userId           String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  mediaStatsId     String?
  mediaReceivedId  String?
  instance         Instance    @relation(fields: [instanceName], references: [instanceName], onDelete: Cascade)
  mediaReceived    MediaStats? @relation("WarmupStatsToMediaStatsReceived", fields: [mediaReceivedId], references: [id])
  mediaStats       MediaStats? @relation("WarmupStatsToMediaStatsSent", fields: [mediaStatsId], references: [id])
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([instanceName])
}

model Campaign {
  id                     String              @id @default(uuid())
  name                   String
  description            String?
  status                 String              @default("draft")
  type                   String
  message                String?
  mediaUrl               String?
  mediaType              String?
  mediaCaption           String?
  scheduledDate          DateTime?
  scheduledStatus        String?             @default("pending")
  startedAt              DateTime?
  completedAt            DateTime?
  pausedAt               DateTime?
  progress               Int                 @default(0)
  minDelay               Int                 @default(5)
  maxDelay               Int                 @default(30)
  userId                 String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  instanceId             String?
  isAiResponder          Json?
  maxMessagesPerInstance Int?
  rotationStrategy       String?
  selectedInstances      String[]            @default([])
  useRotation            Boolean             @default(false)
  dispatches             CampaignDispatch[]
  MessageAnalytics       MessageAnalytics[]
  MessageLog             MessageLog[]
  ContactCampaigns       ContactCampaigns[]
  CampaignSchedule       CampaignSchedule[]
  CampaignErrorLog       CampaignErrorLog[]
  leads                  CampaignLead[]
  messages               CampaignMessage[]
  statistics             CampaignStatistics?
  instance               Instance?           @relation(fields: [instanceId], references: [id])
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([instanceId])
  @@index([status])
  @@map("whatlead_campaigns")
}

model CampaignDispatch {
  id           String    @id @default(uuid())
  campaignId   String
  instanceName String
  status       String    @default("pending")
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  instance     Instance  @relation(fields: [instanceName], references: [instanceName], onDelete: Cascade)
}

model CampaignMessage {
  id         String   @id @default(uuid())
  campaignId String
  type       String   @default("text")
  content    String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@map("whatlead_campaign_messages")
}

model CampaignLead {
  id            String       @id @default(uuid())
  userId        String
  campaignId    String
  name          String?
  phone         String
  status        String       @default("pending")
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  messageId     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  engagement    String?
  segment       String?
  syncedAt      DateTime?
  syncedWithCRM Boolean      @default(false)
  messageLogs   MessageLog[]
  campaign      Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, phone], name: "unique_campaign_phone")
  @@index([campaignId])
  @@index([phone])
  @@index([status])
  @@map("whatlead_campaign_leads")
}

model CampaignSchedule {
  id            String    @id @default(uuid())
  campaignId    String
  instanceName  String
  scheduledDate DateTime
  status        String    @default("pending")
  message       String?
  mediaType     String?
  mediaUrl      String?
  mediaCaption  String?
  minDelay      Int       @default(5)
  maxDelay      Int       @default(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  campaign      Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  instance      Instance  @relation(fields: [instanceName], references: [instanceName])

  @@index([campaignId])
  @@index([instanceName])
  @@index([scheduledDate])
  @@map("campaign_schedules")
}

model CampaignStatistics {
  id             String    @id @default(uuid())
  campaignId     String    @unique
  totalLeads     Int       @default(0)
  sentCount      Int       @default(0)
  deliveredCount Int       @default(0)
  readCount      Int       @default(0)
  failedCount    Int       @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  campaign       Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@map("whatlead_campaign_statistics")
}

model MessageLog {
  id             String        @id @default(uuid())
  campaignId     String?
  campaignLeadId String?
  leadId         String?
  messageId      String        @unique
  messageDate    DateTime
  messageType    String
  content        String?
  status         String
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  failedAt       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  statusHistory  Json          @default("[]")
  campaign       Campaign?     @relation(fields: [campaignId], references: [id])
  campaignLead   CampaignLead? @relation(fields: [campaignLeadId], references: [id])
  lead           Lead?         @relation(fields: [leadId], references: [id])

  @@index([campaignId])
  @@index([campaignLeadId])
  @@index([leadId])
  @@index([messageId])
  @@index([status])
}

model MessageAnalytics {
  id             String   @id @default(uuid())
  campaignId     String
  date           DateTime
  sentCount      Int      @default(0)
  deliveredCount Int      @default(0)
  readCount      Int      @default(0)
  respondedCount Int      @default(0)
  failedCount    Int      @default(0)
  campaign       Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
}

model Contact {
  id               String             @id @default(uuid())
  phone            String             @unique
  name             String
  email            String?
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  avatar           String?
  isActive         Boolean            @default(true)
  lastInteraction  DateTime?
  tags             Json               @default("{}")
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ContactCampaigns ContactCampaigns[]
  notes            ContactNote[]

  @@index([userId, phone])
}

model MessageAttachment {
  id        String   @id @default(uuid())
  filename  String
  url       String
  type      String
  size      Int?
  createdAt DateTime @default(now())
  mimeType  String?
  name      String?

  @@map("whatlead_message_attachments")
}

model CampaignErrorLog {
  id           String   @id @default(uuid())
  campaignId   String
  errorMessage String
  errorDetails Json?
  createdAt    DateTime @default(now())
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@map("whatlead_campaign_error_logs")
}

model ContactNote {
  id        String   @id @default(uuid())
  contactId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([contactId])
  @@map("whatlead_contact_notes")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  emoji     String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@map("whatlead_message_reactions")
}

model HotmartTransaction {
  id             String    @id @default(uuid())
  userId         String
  transactionId  String    @unique
  event          String
  status         String
  amount         Float
  currency       String
  productName    String
  productId      String
  buyerEmail     String
  buyerName      String
  orderDate      DateTime
  approvedDate   DateTime?
  paymentMethod  String
  installments   Int
  subscriberCode String?
  planName       String?
  nextChargeDate DateTime?
  rawData        Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([transactionId])
  @@index([event])
  @@index([status])
  @@index([buyerEmail])
  @@index([subscriberCode])
  @@map("whatlead_hotmart_transactions")
}

model Payment {
  id              String   @id
  stripePaymentId String   @unique
  amount          Int
  currency        String
  status          String
  customerId      String?
  metadata        Json?
  disputeStatus   String?
  disputeReason   String?
  cancelReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  userId          String?
  dueDate         DateTime
  whatlead_users  User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([status])
  @@index([userId])
}

model ContactCampaigns {
  A                  String
  B                  String
  whatlead_campaigns Campaign @relation(fields: [A], references: [id], onDelete: Cascade)
  Contact            Contact  @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_ContactCampaigns_AB_pkey")
  @@index([B], map: "_ContactCampaigns_B_index")
  @@map("_ContactCampaigns")
}

enum InstanceStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  OFFLINE
  ERROR
  OPEN
  CLOSED
  RECEIVED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}
