// src/config/evolution-websocket.config.ts
import EvolutionWebSocketService from "../services/evolution-websocket.service";
import { logger } from "@/utils/logger";

const configLogger = logger.setContext("EvolutionWebSocketConfig");

export interface EvolutionWebSocketConfig {
  url: string;
  apiKey: string;
  globalMode: boolean;
  instanceName?: string;
  enabled: boolean;
}

/**
 * Carrega configura√ß√£o do WebSocket da Evolution API das vari√°veis de ambiente
 */
export function loadEvolutionWebSocketConfig(): EvolutionWebSocketConfig {
  const config: EvolutionWebSocketConfig = {
    url: process.env.API_EVO_URL || "ws://localhost:8080",
    apiKey: process.env.EVO_API_KEY || "",
    globalMode: process.env.WEBSOCKET_GLOBAL_EVENTS === "true",
    instanceName: process.env.EVOLUTION_INSTANCE_NAME,
    enabled: process.env.WEBSOCKET_ENABLED === "true",
  };

  // Valida√ß√µes
  if (!config.apiKey) {
    throw new Error("EVO_API_KEY √© obrigat√≥ria para conectar ao WebSocket da Evolution API");
  }

  if (!config.globalMode && !config.instanceName) {
    throw new Error("EVOLUTION_INSTANCE_NAME √© obrigat√≥ria quando WEBSOCKET_GLOBAL_EVENTS n√£o est√° ativado");
  }

  configLogger.log("Configura√ß√£o do WebSocket Evolution carregada:", {
    url: config.url,
    globalMode: config.globalMode,
    instanceName: config.instanceName,
    enabled: config.enabled,
  });

  return config;
}

/**
 * Inicializa o WebSocket da Evolution API se estiver habilitado
 */
export async function initializeEvolutionWebSocketIfEnabled(): Promise<void> {
  try {
    const config = loadEvolutionWebSocketConfig();

    if (!config.enabled) {
      configLogger.log("WebSocket da Evolution API est√° desabilitado");
      return;
    }

    configLogger.log("üöÄ Inicializando WebSocket da Evolution API...");

    // Criar inst√¢ncia do servi√ßo WebSocket (precisa do LeadSegmentationService)
    // Por enquanto, apenas log da configura√ß√£o
    configLogger.log("WebSocket configurado:", config);

    configLogger.log("‚úÖ WebSocket da Evolution API inicializado com sucesso");

  } catch (error) {
    configLogger.error("‚ùå Erro ao inicializar WebSocket da Evolution API:", error);
    
    // N√£o lan√ßar erro para n√£o quebrar a aplica√ß√£o
    // O sistema pode funcionar sem WebSocket usando webhooks como fallback
    configLogger.warn("‚ö†Ô∏è Sistema continuar√° funcionando sem WebSocket da Evolution API");
  }
}

export default {
  loadEvolutionWebSocketConfig,
  initializeEvolutionWebSocketIfEnabled,
};